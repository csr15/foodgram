import React, { Component } from 'react'
import { connect } from 'react-redux';
import './RecipeUpload.css';
import rightArrow from '../../MainLayout/images/right-arrow.svg'
import { withRouter } from 'react-router';

class RecipeUpload extends Component {
    state = {
        recipeName: '',
        recipeShortDesc: '',
        recipIngredients: '',
        recipIngredientsAmount: '',
        allIngredients: ''
    }
    handleStageOne = (e) => {
        e.preventDefault();
        this.props.onStageOneHandler(this.state.recipeName, this.state.recipeShortDesc);
    }
    handleStageTwo = (e) => {
        e.preventDefault();
        const confirmSubmission = window.confirm('Is every ingredients added ?');
        if(confirmSubmission){
            this.props.onStageTwoHandler();
        }
    }
    handleStageThree = (e) => {
        this.props.history.push("/login")
    }
    inputHandler = (e) => {
        this.setState({
            [e.target.name] : e.target.value
        })
    }
    addIngredientsHandler = (e) => {
        const keyValue = e.which || e.keyCode;
        if(keyValue === 13){
            e.preventDefault();
            this.setState(prevState => ({
                recipIngredients: '',
                recipIngredientsAmount: '',
                allIngredients: {                   
                    ...prevState.allIngredients,    
                    [this.state.recipIngredients] : this.state.recipIngredientsAmount
                }
                
            }))           
        }
    }
    render() {
        return (
            <div className="container recipe-layout">
                <div className="upload-timeline">
                    <div className="stage-one" style={this.props.uploadStatus === 1 ? {background: '#3c56e8', boxShadow: '3px 6px 12px -1px rgba(0, 0, 0, 0.1)'}: null}><h6 style={this.props.uploadStatus === 1 ? {color: '#fff'}: null}>1</h6></div>
                    <div className="stage-two" style={this.props.uploadStatus === 2 ? {background: '#3c56e8', boxShadow: '3px 6px 12px -1px rgba(0, 0, 0, 0.1)'}: null}><h6 style={this.props.uploadStatus === 2 ? {color: '#fff'}: null}>2</h6></div>
                    <div className="stage-two" style={this.props.uploadStatus === 3 ? {background: '#3c56e8', boxShadow: '3px 6px 12px -1px rgba(0, 0, 0, 0.1)'}: null}><h6 style={this.props.uploadStatus === 3 ? {color: '#fff'}: null}>3</h6></div>
                </div>
                {/* -----------FirstStage---------- */}
                <div className="upload-recipe text-center">
                {this.props.uploadStatus === 1 ? 
                    <form onSubmit={this.handleStageOne}>
                        <input type="text" name="recipeName" id="name" autoComplete="off" placeholder="Recipe Title" onChange={this.inputHandler} />
                        <input type="text" name="recipeShortDesc" id="desc" autoComplete="off" placeholder="Short Description Of Recipe" onChange={this.inputHandler} />
                        <button type="submit" className="btn btn-upload">Next <img src={rightArrow} alt="Right Arrow"/></button>
                    </form>
                    :
                    null
                }
                {this.props.uploadStatus === 2 ? 
                    <form onSubmit={this.handleStageTwo}>
                        <input type="text" name="recipIngredients" id="name" value={this.state.recipIngredients} autoComplete="off" placeholder="List your Ingredients" onChange={this.inputHandler}/>
                        <input type="text" name="recipIngredientsAmount" id="recipIngredientsAmount" value={this.state.recipIngredientsAmount} autoComplete="off" placeholder="Quantity" onChange={this.inputHandler} onKeyPress={this.addIngredientsHandler}/>
                        <div className="ingredients">
                        <p>{this.state.recipIngredients}<span className="badge">{this.state.recipIngredientsAmount}</span></p>
                        </div>
                        {this.props.allIng}

                        <div className="ingredients-total">
                            {Object.keys(this.state.allIngredients).map((el, index) => {
                                return(
                                <p key={index}>{el} <span className="badge">{this.state.allIngredients[el]}</span></p>
                                )
                            })}
                        </div>
                        <button type="submit" className="btn btn-upload">Next <img src={rightArrow} alt="Right Arrow"/></button>
                    </form>
                    :
                    null
                }
                {this.props.uploadStatus === 3 ? 
                    <form onSubmit={this.handleStageThree}>
                        <input type="text" name="recipe-name" id="name" autoComplete="off" placeholder="Recipe Titleee"/>
                        <input type="text" name="recipe-short-desc" id="desc" autoComplete="off" placeholder="Short Description Of Recipe"/>
                        <button type="submit" className="btn btn-upload">Next <img src={rightArrow} alt="Right Arrow"/></button>
                    </form>
                    :
                    null
                }
                </div>
            </div>
        )
    }
}

const mapStateToProps = (state) => {
    return{
        uploadStatus: state.recipeUploadStatus,
        recipeName: state.recipeName,
        recipeDesc: state.recipeDesc,
        allIng: state.allIngredients
    }
}

const mapDispatchToProps = (dispatch) => {
    return{
        onStageOneHandler: (recipeName, recipeDesc) => dispatch({type: 'STAGE_ONE', recipeName: {recipeName}, recipeDesc: {recipeDesc}}),
        onStageTwoHandler: () => dispatch({type: 'STAGE_TWO'}),
        updateIngredientsHandler: (allIngredients) => dispatch({type: 'UPDATE_INGREDIENTS_STATE', allIngredients:{allIngredients}})
    }
}
export default connect(mapStateToProps, mapDispatchToProps)(withRouter(RecipeUpload));









<div className="form-inline">
    <label class="radio-inline">
        <input type="radio" name="quantity" />Kg
    </label>
    <label class="radio-inline">
        <input type="radio" name="quantity" />Liter
    </label>
</div>







state = {
        img: ''
    }
    
    componentDidMount(){
        const storageRef = Firebase.storage().ref();
        const csrImg = storageRef.child('csr.jpeg');
        storageRef.child('csr.jpeg').getDownloadURL()
        .then(url => this.setState({img: url}))
        .catch(err => console.log(err));
    }










    .then(() => {
                const user = Firebase.auth().currentUser;
                const dbRef = Firebase.database().ref('Accounts');
                if(user != null){
                    dbRef.child(Firebase.auth().currentUser.uid).set({
                        name: name,
                        age: age
                    })
                }
                this.props.history.push('/login');
            })









========MAIN.JS===========
componentDidMount(){
        let ref = Firebase.database().ref("Accounts");
        const userId  = Firebase.auth().currentUser.uid;
        console.log(userId);
        ref.orderByKey().equalTo(userId).on("value", snap => {
            snap.forEach(childValue => {
                let age = childValue.val().age;
                console.log(age);
            })
        })
    }




    {/* {
                    this.state.name.map((el, index) => {
                        return Object.keys(el).map(innerEl => {
                            return <UpdateRecipe key={index} name={el[innerEl]} desc = {[...this.state.desc]} />
                        })
                    })
               } */}













               const updatedRecipeIngredients = recipeIng.map(el => {
            return Object.keys(el).map((innerEl, index) => {
                return <div key={index}>{innerEl}<span>{el[innerEl]}</span> </div>
            })
        })









        // componentDidMount(){
    //     let ref = Firebase.database().ref("Recipes");
    //     const userId  = Firebase.auth().currentUser.uid;
    //     console.log(userId);
    //     ref.orderByKey().equalTo(userId).on("value", snap => {
    //         snap.forEach(childValue => {
    //             childValue.forEach(innerChildValue => {
    //                 console.log(innerChildValue.val(), innerChildValue.val().description);
    //                 this.setState({
    //                     name: this.state.name.concat(innerChildValue.val().recipeName),
    //                     desc: this.state.desc.concat(innerChildValue.val().description),
    //                     instructions: this.state.instructions.concat(innerChildValue.val().instructions),
    //                     ingredients: this.state.ingredients.concat(innerChildValue.val().instructions)
    //                 })
    //             })
    //         })
    //     })
    // }








    {/* {
                            <Modal show={this.state.onShow} onHide={this.hideModal}>
                                <Modal.Header>
                                    <Modal.Title>Uploaded Sucessfully</Modal.Title>
                                </Modal.Header>
                            </Modal>
                    } */}








import React, { Component } from 'react'
import Firebase from '../Fire/base';
import { connect } from 'react-redux'   
import './Home.css';
import { Link } from 'react-router-dom';
import notFoundImg from './Images/not-found.gif';

class Home extends Component {
    state = {
        userName: 'Prasanna MRG',
        recipeNames: [],
        didUpload: true
    }
    componentDidMount() {
        const user = Firebase.auth().currentUser;

        //Checking whether the user uploaded recipes or not
        const dbRef = Firebase.database().ref(`Recipes`);
        const refCurrentUser = dbRef.child(`${user.uid}`)
        
        let allRecpNames = [];
        dbRef.orderByKey().equalTo(user.uid).on("value", (snap) => {
            snap.forEach(childSnap => {
                childSnap.forEach(innerChildSnap => {
                    Object.keys(innerChildSnap.val().recipeName).map(el => {
                        allRecpNames.push(innerChildSnap.val().recipeName[el]);
                    })
                })
            })
        })
        this.setState({recipeNames: allRecpNames});

        //Displaying users profile
        if(user){
            this.setState({
                userName: user.displayName,
            })
        }   
    }
    render(){
        return(
            <div className="container home-layout">
                <div className="row header-user">
                    {
                        this.state.didUpload ? 
                        <div className="row">
                            <div className="col-md-3 user-details">
                                <h3>{this.state.userName}</h3>
                                <p>Recipes Uploaded: <span className="total-recipes">{this.state.recipeNames.length}</span> </p>
                            </div>
                            <div className="col-md-9 list-short-recipes my-auto">
                                {
                                    this.state.recipeNames.map((el, index) => (
                                        <span  key={index}>
                                            <Link to="/myrecipe"><button className="btn-home-recp-list">{el}</button></Link>
                                        </span>
                                    ))
                                }
                                <Link to="/uploadRecipe"><button className="btn-home-add-recp">Add More Recipe<i className="fas fa-chevron-right" style={{marginLeft: '3px'}}></i></button></Link>
                            </div>
                        </div>
                        :
                        <div className="col-md-12 text-center">
                            <div className="not-found">
                                <img src={notFoundImg} alt="Not Found......!" />
                                <h3 className="text-muted">You have not uploaded any recipes...!</h3>
                                <Link to="/uploadRecipe"><button className="btn-add-more-recp">Add Recipes</button></Link> 
                            </div>
                        </div>
                    }
                </div>
            </div>
        )
    }
}

const mapStateToProps = state => {
    return{
        recipeName: state.recipeName,
        recipeDesc: state.recipeDesc,
        isIng: state.isIng,
        recipeIns: state.recipeIns,
        allRecipeIng: state.allIngredients,
        uploaded: state.uploaded
    }
}

export default connect(mapStateToProps)(Home);
